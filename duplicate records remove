package april22;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class ExcelDuplicateRemoverInPlace {

    private static final String FILE_PATH = "C:\\Users\\inahp\\Desktop\\demo.xlsx"; // Replace with your file path
    private static final String SHEET_NAME = "Active Jiras"; // Replace with your sheet name

    public static void main(String[] args) {
        try {
            FileInputStream fis = new FileInputStream(FILE_PATH);
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheet(SHEET_NAME);

            if (sheet == null) {
                System.out.println("Sheet '" + SHEET_NAME + "' not found in the workbook.");
                return;
            }

            // Find column indices for "issue_key" and "Issue_link"
            int issueKeyColIndex = -1;
            int issueLinkColIndex = -1;

            Row headerRow = sheet.getRow(0); // Assuming header is in the first row (row 0)
            if (headerRow != null) {
                for (Cell cell : headerRow) {
                    String cellValue = getCellValueAsString(cell); // Use helper for header too
                    if ("Issue Key".equalsIgnoreCase(cellValue)) {
                        issueKeyColIndex = cell.getColumnIndex();
                    } else if ("Issue_Link".equalsIgnoreCase(cellValue)) {
                        issueLinkColIndex = cell.getColumnIndex();
                    }
                }
            }

            if (issueKeyColIndex == -1 || issueLinkColIndex == -1) {
                System.out.println("Could not find 'issue_key' or 'Issue_link' columns in the header.");
                return;
            }

            Set<String> uniqueCombinations = new HashSet<>();
            List<List<String>> uniqueRowData = new ArrayList<>(); // Store data as list of strings

            // Add header row to uniqueRowData
            if (headerRow != null) {
                List<String> headerData = new ArrayList<>();
                for (int i = 0; i < headerRow.getLastCellNum(); i++) {
                    headerData.add(getCellValueAsString(headerRow.getCell(i)));
                }
                uniqueRowData.add(headerData);
            }

            // Iterate over rows, starting from the second row (index 1) for data
            for (int r = 1; r <= sheet.getLastRowNum(); r++) {
                Row currentRow = sheet.getRow(r);
                if (currentRow == null) {
                    continue; // Skip empty rows
                }

                Cell issueKeyCell = currentRow.getCell(issueKeyColIndex);
                Cell issueLinkCell = currentRow.getCell(issueLinkColIndex);

                String issueKey = getCellValueAsString(issueKeyCell);
                String issueLink = getCellValueAsString(issueLinkCell);

                String combinedKey = issueKey + "_" + issueLink; // Create a unique combination key

                if (!uniqueCombinations.contains(combinedKey)) {
                    uniqueCombinations.add(combinedKey);
                    List<String> rowData = new ArrayList<>();
                    for (int c = 0; c < currentRow.getLastCellNum(); c++) {
                        rowData.add(getCellValueAsString(currentRow.getCell(c)));
                    }
                    uniqueRowData.add(rowData); // Add the data of the row if it's unique
                }
            }
            fis.close(); // Close input stream after reading

            // Clear the existing sheet content
            int lastRow = sheet.getLastRowNum();
            for (int i = 0; i <= lastRow; i++) {
                Row row = sheet.getRow(i);
                if (row != null) {
                    sheet.removeRow(row);
                }
            }

            // Write the unique data back to the same sheet
            for (int r = 0; r < uniqueRowData.size(); r++) {
                Row newRow = sheet.createRow(r); // Create new rows sequentially
                List<String> rowValues = uniqueRowData.get(r);
                for (int c = 0; c < rowValues.size(); c++) {
                    Cell newCell = newRow.createCell(c);
                    newCell.setCellValue(rowValues.get(c));
                    // Note: This simplified version does not copy cell styles.
                    // If you need styles, you'd need to store CellStyle objects
                    // in uniqueRowData or reapply them based on some logic.
                }
            }

            // Save the workbook
            FileOutputStream fos = new FileOutputStream(FILE_PATH);
            workbook.write(fos);
            workbook.close();
            fos.close();

            System.out.println("Duplicate rows removed and unique data updated in sheet '" + SHEET_NAME + "' in " + FILE_PATH);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to get cell value as String, handling different cell types
    private static String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    return String.valueOf(cell.getNumericCellValue());
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula(); // Consider evaluating if you want the result
            case BLANK:
                return "";
            default:
                return "";
        }
    }
}
