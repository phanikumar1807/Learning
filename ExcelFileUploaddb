package June20;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class ExcelFileUpload {

//	CREATE TABLE documents (
//		    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, -- Auto-incrementing ID
//		    filename VARCHAR2(255) NOT NULL,
//		    mime_type VARCHAR2(100), -- To store the file type (e.g., application/vnd.ms-excel)
//		    file_content BLOB NOT NULL,
//		    file_size NUMBER,
//		    upload_date TIMESTAMP DEFAULT SYSTIMESTAMP
//		);
//	<dependency>
//    <groupId>com.oracle.database.jdbc</groupId>
//    <artifactId>ojdbc8</artifactId> <version>23.4.0.24.05</version> </dependency>
	
	
//	SELECT id, filename, mime_type, file_size, upload_date FROM documents;
 
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:orcl"; // Example: jdbc:oracle:thin:@<hostname>:<port>:<service_name> or <SID>
    private static final String DB_USER = "SYSDBA"; // e.g., SYSTEM, HR, your_schema_user
    private static final String DB_PASSWORD = "123456789"; // Your database password

  
    private static final String EXCEL_FILE_PATH = "C:\\Users\\inahp\\eclipse-workspace\\ImageToExcel\\src\\main\\resources\\images\\dbUpload.xlsx"; 
    public static void main(String[] args) throws ClassNotFoundException {
        // Step 1: Create a dummy Excel file for testing if you don't have one
        createDummyExcelFile(EXCEL_FILE_PATH);

        // Step 2: Upload the Excel file to the database
        uploadExcelFile();
    }

   
    public static void uploadExcelFile() throws ClassNotFoundException {
        File excelFile = new File(EXCEL_FILE_PATH);

        if (!excelFile.exists()) {
            System.err.println("Error: Excel file not found at " + EXCEL_FILE_PATH);
            System.err.println("Please make sure the file exists or adjust the EXCEL_FILE_PATH variable.");
            return;
        }

        Connection conn = null;
        PreparedStatement pstmt = null;
        FileInputStream fis = null;

        try {
            // 1. Load the JDBC driver (not strictly necessary for modern JDBC, but good practice)
             Class.forName("oracle.jdbc.driver.OracleDriver"); // No longer needed for JDBC 4.0+

            // 2. Establish database connection
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            System.out.println("Connection established successfully.");

            // 3. Prepare SQL INSERT statement
            String sql = "INSERT INTO documents (filename, mime_type, file_content, file_size) VALUES (?, ?, ?, ?)";
            pstmt = conn.prepareStatement(sql);

            // 4. Set parameters
            String fileName = excelFile.getName();
            String mimeType = getMimeType(fileName); // Determine MIME type based on extension
            long fileSize = excelFile.length();

            pstmt.setString(1, fileName);
            pstmt.setString(2, mimeType);
            
            // For BLOBs, use setBinaryStream to efficiently stream the file content
            fis = new FileInputStream(excelFile);
            pstmt.setBinaryStream(3, fis, fileSize); // The length parameter is crucial for efficient streaming
            
            pstmt.setLong(4, fileSize);

            // 5. Execute the update
            System.out.println("Uploading file: " + fileName + " (Size: " + fileSize + " bytes)...");
            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("File uploaded successfully!");
            } else {
                System.out.println("File upload failed. No rows affected.");
            }

        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("File I/O error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            // 6. Close resources in reverse order of creation
            try {
                if (fis != null) fis.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
                System.out.println("Database connection closed.");
            } catch (SQLException e) {
                System.err.println("Error closing database resources: " + e.getMessage());
                e.printStackTrace();
            } catch (IOException e) {
                System.err.println("Error closing file stream: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

   
    private static String getMimeType(String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            return "application/octet-stream"; // Default for unknown binary
        }
        String lowerCaseFileName = fileName.toLowerCase();
        if (lowerCaseFileName.endsWith(".xls")) {
            return "application/vnd.ms-excel";
        } else if (lowerCaseFileName.endsWith(".xlsx")) {
            return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        } else if (lowerCaseFileName.endsWith(".csv")) {
            return "text/csv";
        }
        // Add more types as needed
        return "application/octet-stream"; // Default
    }

 
    private static void createDummyExcelFile(String filePath) {
        File file = new File(filePath);
        if (file.exists()) {
            System.out.println("Using existing file: " + filePath);
            return;
        }

        System.out.println("Creating dummy file at: " + filePath);
        // Create parent directories if they don't exist
        File parentDir = file.getParentFile();
        if (parentDir != null && !parentDir.exists()) {
            parentDir.mkdirs();
        }

        try (java.io.FileWriter writer = new java.io.FileWriter(file)) {
            writer.write("Header1,Header2,Header3\n");
            writer.write("Data1,Data2,Data3\n");
            writer.write("More,Sample,Data\n");
            System.out.println("Dummy Excel file (CSV-like) created successfully for testing.");
        } catch (IOException e) {
            System.err.println("Error creating dummy file: " + e.getMessage());
            e.printStackTrace();
        }
    }
}



//code to retrieve
//import java.io.FileOutputStream;
//import java.io.InputStream;
//import java.sql.Blob;
//import java.sql.Connection;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.io.File; // For creating parent directories

//public class ExcelFileDownloader {
//
//    // --- Database Connection Details ---
//    // IMPORTANT: Replace with your actual database details
//    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:XE"; // Example: jdbc:oracle:thin:@<hostname>:<port>:<service_name> or <SID>
//    private static final String DB_USER = "your_username"; // e.g., SYSTEM, HR, your_schema_user
//    private static final String DB_PASSWORD = "your_password"; // Your database password
//
//    // --- Download Location ---
//    // IMPORTANT: Specify the directory where you want to save the downloaded file
//    private static final String DOWNLOAD_DIRECTORY = "C:/temp/downloads"; // Example (use forward slashes or double backslashes)
//                                                                       // On Linux/macOS: "/home/user/downloads"
//
//    public static void main(String[] args) {
//        // Step 1: Specify the ID of the document you want to download
//        // You can find this ID by querying your 'documents' table in SQL Developer.
//        int documentIdToDownload = 1; // Change this to the actual ID of the file you want
//
//        // Step 2: Download the Excel file
//        downloadExcelFile(documentIdToDownload);
//    }
//
//    /**
//     * Downloads an Excel file from the Oracle database based on its ID.
//     * The file will be saved to the DOWNLOAD_DIRECTORY with its original filename.
//     *
//     * @param documentId The ID of the document to download.
//     */
//    public static void downloadExcelFile(int documentId) {
//        Connection conn = null;
//        PreparedStatement pstmt = null;
//        ResultSet rs = null;
//        InputStream input = null;
//        FileOutputStream output = null;
//
//        try {
//            // 1. Establish database connection
//            System.out.println("Connecting to database...");
//            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
//            System.out.println("Connection established successfully.");
//
//            // 2. Prepare SQL query to retrieve filename and file_content (BLOB)
//            String sql = "SELECT filename, file_content FROM documents WHERE id = ?";
//            pstmt = conn.prepareStatement(sql);
//            pstmt.setInt(1, documentId);
//
//            // 3. Execute query
//            System.out.println("Attempting to retrieve document with ID: " + documentId);
//            rs = pstmt.executeQuery();
//
//            // 4. Process the result
//            if (rs.next()) {
//                String fileName = rs.getString("filename");
//                Blob fileBlob = rs.getBlob("file_content"); // Get the BLOB object
//                input = fileBlob.getBinaryStream();          // Get an InputStream from the BLOB
//
//                // Ensure the download directory exists
//                File downloadDir = new File(DOWNLOAD_DIRECTORY);
//                if (!downloadDir.exists()) {
//                    downloadDir.mkdirs(); // Create directories if they don't exist
//                    System.out.println("Created download directory: " + DOWNLOAD_DIRECTORY);
//                }
//
//                File outputFile = new File(DOWNLOAD_DIRECTORY + File.separator + fileName); // Construct full path
//                output = new FileOutputStream(outputFile);
//
//                System.out.println("Downloading file '" + fileName + "' to: " + outputFile.getAbsolutePath());
//
//                // 5. Read from InputStream and write to FileOutputStream
//                byte[] buffer = new byte[4096]; // Buffer size (e.g., 4KB)
//                int bytesRead;
//                long totalBytesDownloaded = 0;
//
//                while ((bytesRead = input.read(buffer)) != -1) {
//                    output.write(buffer, 0, bytesRead);
//                    totalBytesDownloaded += bytesRead;
//                }
//
//                System.out.println("File downloaded successfully!");
//                System.out.println("Total bytes downloaded: " + totalBytesDownloaded);
//
//            } else {
//                System.out.println("Document with ID " + documentId + " not found in the database.");
//            }
//
//        } catch (SQLException e) {
//            System.err.println("Database error: " + e.getMessage());
//            e.printStackTrace();
//        } catch (java.io.IOException e) { // Use java.io.IOException for file operations
//            System.err.println("File I/O error during download: " + e.getMessage());
//            e.printStackTrace();
//        } finally {
//            // 6. Close resources in reverse order of creation
//            try {
//                if (output != null) output.close();
//                if (input != null) input.close();
//                if (rs != null) rs.close();
//                if (pstmt != null) pstmt.close();
//                if (conn != null) conn.close();
//                System.out.println("Database connection closed.");
//            } catch (SQLException e) {
//                System.err.println("Error closing database resources: " + e.getMessage());
//                e.printStackTrace();
//            } catch (java.io.IOException e) {
//                System.err.println("Error closing file stream: " + e.getMessage());
//                e.printStackTrace();
//            }
//        }
//    }
//}
